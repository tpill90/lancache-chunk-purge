@page "/"
@using System.Diagnostics
@using System.Globalization
@using System.Reflection

<PageTitle>Index</PageTitle>

<h3>Enter access.log entries, then click submit.</h3>

<!-- TODO need to do input validation -->
<textarea @bind="TextAreaContent" rows="5" cols="30" placeholder="Paste one or more log lines"> </textarea>

<br />
<!-- TODO no need to click, do it automatically-->
<button @onclick="HandleButtonClick">Submit</button>

<br/>
<br/>

<h3>Delete the following files from your cache dir:</h3>
<ol>
    @foreach (var item in results)
    {
        <ul>@item</ul>
    }
</ol>

<div>
    @GitSha
    @buildDate
</div>

@code {

    private string GitSha = ThisAssembly.Git.Sha;
    private string buildDate = GetBuildDate(Assembly.GetExecutingAssembly()).ToString();

    private string[] userInputLines = Array.Empty<string>();

    private string TextAreaContent
    {
        get => string.Join("\n", userInputLines);
        set => userInputLines = value.Split(new[] { "\r\n", "\n" }, StringSplitOptions.None);
    }

    private List<string> results = new List<string>();
    
    private static DateTime GetBuildDate(Assembly assembly)
    {
        const string BuildVersionMetadataPrefix = "+build";

        var attribute = assembly.GetCustomAttribute<AssemblyInformationalVersionAttribute>();
        if (attribute?.InformationalVersion != null)
        {
            var value = attribute.InformationalVersion;
            var index = value.IndexOf(BuildVersionMetadataPrefix);
            if (index > 0)
            {
                value = value.Substring(index + BuildVersionMetadataPrefix.Length);
                if (DateTime.TryParseExact(value, "yyyyMMddHHmmss", CultureInfo.InvariantCulture, DateTimeStyles.None, out var result))
                {
                    return result;
                }
            }
        }

        return default;
    }

    private void HandleButtonClick()
    {
        //TODO dedupe user inputted request by url + byte range
        foreach (var line in userInputLines)
        {
            if (string.IsNullOrEmpty(line))
            {
                continue;
            }

            var parsedLog = NginxLogParser.ParseRequestLog(line).First();

            var calculatedFilePaths = parsedLog.ComputeOnDiskFileName();
            results.AddRange(calculatedFilePaths);
        }
    }
}